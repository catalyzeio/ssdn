#!/usr/bin/env python
import argparse
import json
import sys
import time


def rename(d, old, new):
    val = d.pop(old)
    if val:
        d[new] = val


def convert_time(d, k):
    val = d.pop(k)
    if val:
        ltime = time.gmtime(val)
        rfc3339fmt = time.strftime('%Y-%m-%dT%H:%M:%SZ', ltime)
        d[k] = rfc3339fmt


def convert_int(d, k):
    val = d.pop(k)
    if val:
        d[k] = int(val)


parser = argparse.ArgumentParser(description='Migrates an agent state file from v1.x format to v2.x format')
parser.add_argument('input', help='input agent.json file')
parser.add_argument('output', help='output file')
args = parser.parse_args()

infile, outfile = args.input, args.output

state = {}
if infile == '-':
    state = json.load(sys.stdin)
else:
    with open(infile) as data:
        state = json.load(data)

for job_id, job_data in state.items():
    rename(job_data, 'launch_info', 'launchInfo')
    convert_time(job_data, 'created')
    convert_time(job_data, 'updated')
    description = job_data.get('description')
    if description:
        resources = description.get('resources')
        if resources:
            convert_int(resources, 'memory')
    context = job_data.get('context')
    if context:
        rename(context, 'one_shot', 'oneShot')
        rename(context, 'proxy_ports', 'proxyPorts')
        rename(context, 'publish_ports', 'publishPorts')
        rename(context, 'container_id', 'containerID')

if outfile == '-':
    json.dump(state, sys.stdout)
else:
    with open(outfile, 'w') as dest:
        json.dump(state, dest)
